import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from collections.abc import Sequence
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import aiosmtplib
from email.message import EmailMessage
from typing import Any

ADMINS = [552379435, 2077000128]
SMTP_EMAIL = "lackytek@gmail.com"
SMTP_PASSWORD = "btplwoezaftagsxh"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class OrderForm(StatesGroup):
    fio = State()
    phone = State()
    address = State()
    grind = State()
    payment_screenshot = State()

def main_menu():
    kb = [
        [InlineKeyboardButton(text="‚òïÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞", callback_data="shipping")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def catalog_menu():
    kb = [
        [InlineKeyboardButton(text="–ö–æ—Ñ–µ 250–≥ –∑–µ—Ä–Ω–æ (–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å)", callback_data="coffee_250")],
        [InlineKeyboardButton(text="–ö–æ—Ñ–µ 1000–≥ –∑–µ—Ä–Ω–æ (—Ä–∞—Å–ø—Ä–æ–±–æ–≤–∞—Ç—å)", callback_data="coffee_1000")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]])

async def send_order_email(subject, body, to_email):
    try:
        message = EmailMessage()
        message["From"] = SMTP_EMAIL
        message["To"] = to_email
        message["Subject"] = subject
        message.set_content(body)
        await aiosmtplib.send(
            message,
            hostname=SMTP_SERVER,
            port=SMTP_PORT,
            start_tls=True,
            username=SMTP_EMAIL,
            password=SMTP_PASSWORD
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –î–∑–µ–Ω –ö–æ—Ñ–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=main_menu())

@dp.callback_query(F.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫–æ—Ñ–µ:", reply_markup=catalog_menu())

@dp.callback_query(F.data == "coffee_250")
async def coffee_250(callback: types.CallbackQuery):
    photos = [
        "https://i.postimg.cc/B62Cc79J/IMG-20250519-134553-449.jpg",
        "https://i.postimg.cc/tCk2Mc1T/IMG-20250519-134852-540.jpg",
        "https://i.postimg.cc/ht3MS71R/IMG-20250519-135251-240.jpg",
        "https://i.postimg.cc/CLScJ0xX/IMG-20250519-140407-682.jpg",
        "https://i.postimg.cc/W4BnZLy9/IMG-20250519-141312-478.jpg",
        "https://i.postimg.cc/s2Qm1DTQ/IMG-20250618-201659-663.jpg"
    ]
    media: Sequence = [InputMediaPhoto(media=url) for url in photos]
    await callback.answer()
    await bot.send_media_group(callback.from_user.id, media)
    await bot.send_message(
        callback.from_user.id,
        "‚òïÔ∏è <b>–î–∑–µ–Ω –ö–æ—Ñ–µ ‚Äî –°—É–ª—å –¥–µ –ú–∏–Ω–∞—Å 250 –≥</b>\n749 ‚ÇΩ\n–°—Ä–µ–¥–Ω—è—è –æ–±–∂–∞—Ä–∫–∞, –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞.\n–í–∫—É—Å: —à–æ–∫–æ–ª–∞–¥, –æ—Ä–µ—Ö–∏, –ª—ë–≥–∫–∞—è –∫–∏—Å–ª–∏–Ω–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy_250")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="catalog")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "coffee_1000")
async def coffee_1000(callback: types.CallbackQuery):
    photos = [
        "https://i.postimg.cc/hPsdnWbk/1-1.png",
        "https://i.postimg.cc/zX8g4XWw/2.png",
        "https://i.postimg.cc/26WWN12G/3.png",
        "https://i.postimg.cc/y6FRfSJY/4.png",
        "https://i.postimg.cc/ZnFy01ky/5.png",
        "https://i.postimg.cc/jSqyndSq/6.png"
    ]
    media: Sequence = [InputMediaPhoto(media=url) for url in photos]
    await callback.answer()
    await bot.send_media_group(callback.from_user.id, media)
    await bot.send_message(
        callback.from_user.id,
        "‚òïÔ∏è <b>–î–∑–µ–Ω –ö–æ—Ñ–µ ‚Äî –°—É–ª—å –¥–µ –ú–∏–Ω–∞—Å 1000 –≥</b>\n2399 ‚ÇΩ\n–°—Ä–µ–¥–Ω—è—è –æ–±–∂–∞—Ä–∫–∞, –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞.\n–í–∫—É—Å: —à–æ–∫–æ–ª–∞–¥, –æ—Ä–µ—Ö–∏, –ª—ë–≥–∫–∞—è –∫–∏—Å–ª–∏–Ω–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy_1000")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="catalog")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "buy_250")
async def buy_250(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞.\n\n–í–∞—à–µ <b>–§–ò–û</b>:", parse_mode="HTML", reply_markup=back_menu())
    await state.set_state(OrderForm.fio)
    await state.update_data(weight="250 –≥", paylink="https://yookassa.ru/my/i/aF6PZhaxXQmX/l")

@dp.callback_query(F.data == "buy_1000")
async def buy_1000(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞.\n\n–í–∞—à–µ <b>–§–ò–û</b>:", parse_mode="HTML", reply_markup=back_menu())
    await state.set_state(OrderForm.fio)
    await state.update_data(weight="1000 –≥", paylink="https://yookassa.ru/my/i/aF6QF8z6dd86/l")

@dp.message(OrderForm.fio)
async def order_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await bot.send_message(message.chat.id, "–í–∞—à <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>:", parse_mode="HTML", reply_markup=back_menu())
    await state.set_state(OrderForm.phone)

@dp.message(OrderForm.phone)
async def order_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await bot.send_message(message.chat.id, "–í–∞—à <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>:", parse_mode="HTML", reply_markup=back_menu())
    await state.set_state(OrderForm.address)

@dp.message(OrderForm.address)
async def order_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await bot.send_message(message.chat.id, "–ù—É–∂–µ–Ω –ª–∏ –ø–æ–º–æ–ª? –ï—Å–ª–∏ –¥–∞ ‚Äî –ø–æ–¥ –∫–∞–∫–æ–π —Å–ø–æ—Å–æ–±?", reply_markup=back_menu())
    await state.set_state(OrderForm.grind)

@dp.message(OrderForm.grind)
async def order_grind(message: types.Message, state: FSMContext):
    data: dict[str, Any] = await state.get_data() or {}
    await state.update_data(grind=message.text)
    addr = data.get('address', '').lower()
    city_bonus = ""
    if "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" in addr:
        city_bonus = "\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞–∫–∞–∑ –¥–ª—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –∑–∞ –Ω–∞—à —Å—á—ë—Ç!"
    await bot.send_message(
        message.chat.id,
        f"–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî <b>–æ–ø–ª–∞—Ç–∞</b>.\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {data.get('weight', '')}\n"
        f"<a href='{data.get('paylink', '')}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å</a>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.{city_bonus}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=back_menu()
    )
    await bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ):")
    await state.set_state(OrderForm.payment_screenshot)

@dp.message(OrderForm.payment_screenshot, F.photo)
async def order_payment_screenshot(message: types.Message, state: FSMContext):
    if not message.photo or len(message.photo) == 0:
        await bot.send_message(message.chat.id,                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã)!")
        return  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    photo_id = message.photo[-1].file_id
    data: dict[str, Any] = await state.get_data() or {}
    order_text = (
        "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –î–∑–µ–Ω –ö–æ—Ñ–µ!\n"
        f"–§–ò–û: {data.get('fio', '')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address', '')}\n"
        f"–ü–æ–º–æ–ª: {data.get('grind', '')}\n"
        f"–í–µ—Å: {data.get('weight', '')}\n"
    )
    for admin in ADMINS:
        try:
            await bot.send_message(admin, order_text)
            await bot.send_photo(admin, photo_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin}: {e}")
    await send_order_email(
        "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –î–∑–µ–Ω –ö–æ—Ñ–µ",
        order_text,
        SMTP_EMAIL
    )
    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu())
    await state.clear()

@dp.callback_query(F.data == "shipping")
async def shipping(callback: types.CallbackQuery):
    await callback.answer()
    kb = [
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="shipping_info")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", callback_data="payment_info")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@dp.callback_query(F.data == "shipping_info")
async def shipping_info(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞</b>\n\n"
        "‚Ä¢ 5Post ‚Äî –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–æ–≤ –†–§\n"
        "‚Ä¢ –°–î–≠–ö ‚Äî –ø—É–Ω–∫—Ç—ã –∏ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –†–§\n"
        "‚Ä¢ –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É, –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        "–°—Ä–æ–∫–∏: –æ—Ç 1 –¥–æ 7 –¥–Ω–µ–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª—É–∂–±—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞.\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n"
        "‚ùóÔ∏è–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        parse_mode="HTML",
        reply_markup=back_menu()
    )

@dp.callback_query(F.data == "payment_info")
async def payment_info(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        "üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Æ–ö–∞—Å—Å–∞, –≤ –Ω–µ–π –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å–æ–±. \n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- SberPay\n"
        "- –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n"
        "- –ö–æ—à–µ–ª—å–∫–æ–º –ÆMoney\n"
        "- –°–ë–ü",
        parse_mode="HTML",
        reply_markup=back_menu()
    )

@dp.callback_query(F.data == "question")
async def question(callback: types.CallbackQuery):
    await callback.answer()
    kb = [
        [InlineKeyboardButton(text="Telegram: @skybiker01", url="https://t.me/skybiker01")],
        [InlineKeyboardButton(text="Telegram: @kirillshishkin29", url="https://t.me/kirillshishkin29")],
        [InlineKeyboardButton(text="–°–∞–π—Ç", url="https://dzencoffee.ru")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    await bot.send_message(
        callback.from_user.id,
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n"
        "–ü–æ—á—Ç–∞: dzencoffee@mail.ru",  # ‚Üê –ø–æ—á—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ!
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        "–í –º–∏—Ä–µ, –≥–¥–µ –≤—Å–µ —Å–ø–µ—à–∞—Ç –∏ –ø—å—é—Ç –∫–æ—Ñ–µ –Ω–∞ –±–µ–≥—É, –º—ã –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å ‚òï\n"
        "–î–ª—è –Ω–∞—Å –∫–æ—Ñ–µ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± –≤–∑–±–æ–¥—Ä–∏—Ç—å—Å—è, –∞ –æ—Å–æ–±—ã–π —Ä–∏—Ç—É–∞–ª: –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è, –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∫—É—Å –∂–∏–∑–Ω–∏ –∏ –Ω–∞–π—Ç–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–∏ üßò‚Äç‚ôÇÔ∏è\n\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º –∫–æ—Ñ–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–º–µ–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º –∏ –Ω–∞–±—Ä–∞—Ç—å—Å—è —Å–∏–ª ‚Äî —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ —É–∂–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ ‚ú®\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 100% –∞—Ä–∞–±–∏–∫—É: –ª—É—á—à–∏–µ –∑—ë—Ä–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏ üå±\n"
        "–ë–µ–∑ –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤.\n"
        "–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∫–æ—Ñ–µ –Ω–∞ —Å–∫–ª–∞–¥–µ ‚Äî –æ–±–∂–∞—Ä–∏–≤–∞–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ–∂–µ—Å—Ç—å, –≥–ª—É–±–æ–∫–∏–π –∏ –º—è–≥–∫–∏–π –≤–∫—É—Å, –±–µ–∑ –ª–∏—à–Ω–µ–π –∫–∏—Å–ª–∏–Ω–∫–∏ –∏ –≥–æ—Ä–µ—á–∏ ü•Ñ\n\n"
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ñ–µ.\n"
        "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∂–∏–∑–Ω—å ‚Äî –Ω–µ –≥–æ–Ω–∫–∞, –∞ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º ü§ç",
        parse_mode="HTML",
        reply_markup=back_menu()
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
