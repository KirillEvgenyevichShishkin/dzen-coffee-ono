import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from collections.abc import Sequence
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import aiosmtplib
from email.message import EmailMessage
from typing import Any, Optional

ADMINS = [552379435, 2077000128]
SMTP_EMAIL = "lackytek@gmail.com"
SMTP_PASSWORD = "btplwoezaftagsxh"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class OrderForm(StatesGroup):
    fio = State()
    phone = State()
    address = State()
    grind = State()
    payment_screenshot = State()

def main_menu():
    kb = [
        [InlineKeyboardButton(text="–ö–ê–¢–ê–õ–û–ì", callback_data="catalog")],
        [InlineKeyboardButton(text="–î–û–°–¢–ê–í–ö–ê –ò –û–ü–õ–ê–¢–ê", callback_data="shipping")],
        [InlineKeyboardButton(text="–ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°", callback_data="question")],
        [InlineKeyboardButton(text="–ü–û–ß–ï–ú–£ –î–ó–ï–ù", callback_data="about")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def catalog_menu():
    kb = [
        [InlineKeyboardButton(text="–ö–û–§–ï 250–ì –ó–ï–†–ù–û", callback_data="coffee_250")],
        [InlineKeyboardButton(text="–ö–û–§–ï 1000–ì –ó–ï–†–ù–û", callback_data="coffee_1000")],
        [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def back_to(prev_callback):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=prev_callback)],
            [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
        ]
    )

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]])

async def send_order_email(subject, body, to_email):
    try:
        message = EmailMessage()
        message["From"] = SMTP_EMAIL
        message["To"] = to_email
        message["Subject"] = subject
        message.set_content(body)
        await aiosmtplib.send(
            message,
            hostname=SMTP_SERVER,
            port=SMTP_PORT,
            start_tls=True,
            username=SMTP_EMAIL,
            password=SMTP_PASSWORD
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ ---
async def clean_last_message(
    message: Optional[types.Message] = None,
    callback: Optional[types.CallbackQuery] = None,
    state: Optional[FSMContext] = None
):
    if state is None:
        return
    data = await state.get_data() or {}
    last_bot_msg = data.get("last_bot_msg_id")
    try:
        if last_bot_msg is not None:
            if message is not None:
                await bot.delete_message(message.chat.id, last_bot_msg)
            elif callback is not None:
                await bot.delete_message(callback.from_user.id, last_bot_msg)
    except Exception:
        pass

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await clean_last_message(message=message, state=state)
    msg = await bot.send_photo(
        message.chat.id,
        "https://i.postimg.cc/Jn584dW1/image.png",
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –î–∑–µ–Ω –ö–æ—Ñ–µ!\n–ú—ã –æ–±–∂–∞—Ä–∏–≤–∞–µ–º –∑–µ—Ä–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥–µ–Ω—å –æ–±–∂–∞—Ä–∫–∏ –∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.\n- –¢–∞–∫ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–≤–µ–∂–∏–π –∫–æ—Ñ–µ!\n\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá",
        reply_markup=main_menu()
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    msg = await bot.send_photo(
        callback.from_user.id,
        "https://i.postimg.cc/Jn584dW1/image.png",
        caption="–ú—ã –æ–±–∂–∞—Ä–∏–≤–∞–µ–º –∑–µ—Ä–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥–µ–Ω—å –æ–±–∂–∞—Ä–∫–∏ –∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.  - –¢–∞–∫ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–≤–µ–∂–∏–π –∫–æ—Ñ–µ!\n\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá",
        reply_markup=main_menu()
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "catalog")
async def show_catalog(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    msg = await bot.send_photo(
        callback.from_user.id,
        "https://i.postimg.cc/pXBGTb7h/image.jpg",
        caption="–ù–∞—à –Ω–µ–±–æ–ª—å—à–æ–π –∫–∞—Ç–∞–ª–æ–≥ –∫–æ—Ñ–µ:",
        reply_markup=catalog_menu()
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "coffee_250")
async def coffee_250(callback: types.CallbackQuery, state: FSMContext):
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!
    photos = [
        "https://i.postimg.cc/x825ft33/image.png",
        "https://i.postimg.cc/CLJ70CBb/250.jpg",
        "https://i.postimg.cc/CxPcGCww/250.jpg"
    ]
    media: Sequence = [InputMediaPhoto(media=url) for url in photos]
    await callback.answer()
    await bot.send_media_group(callback.from_user.id, media)
    await bot.send_message(
        callback.from_user.id,
        "‚òïÔ∏è <b>–î–∑–µ–Ω –ö–æ—Ñ–µ ‚Äî –°—É–ª—å –¥–µ –ú–∏–Ω–∞—Å 250 –≥</b>\n749 ‚ÇΩ\n–°—Ä–µ–¥–Ω—è—è –æ–±–∂–∞—Ä–∫–∞, –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞.\n–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∫—É—Å: —à–æ–∫–æ–ª–∞–¥, –æ—Ä–µ—Ö–∏, –ª—ë–≥–∫–∞—è –∫–∏—Å–ª–∏–Ω–∫–∞. (–±–µ–∑ –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–£–ü–ò–¢–¨", callback_data="buy_250")],
            [InlineKeyboardButton(text="–ö–ê–¢–ê–õ–û–ì", callback_data="catalog")],
            [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "coffee_1000")
async def coffee_1000(callback: types.CallbackQuery, state: FSMContext):
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!
    photos = [
        "https://i.postimg.cc/vTtzcfPF/1000.jpg",
        "https://i.postimg.cc/4xS17J1d/1000.jpg",
        "https://i.postimg.cc/Hx531fXL/1000.jpg"
    ]
    media: Sequence = [InputMediaPhoto(media=url) for url in photos]
    await callback.answer()
    await bot.send_media_group(callback.from_user.id, media)
    await bot.send_message(
        callback.from_user.id,
        "‚òïÔ∏è <b>–î–∑–µ–Ω –ö–æ—Ñ–µ ‚Äî –°—É–ª—å –¥–µ –ú–∏–Ω–∞—Å 1000 –≥</b>\n2399 ‚ÇΩ\n–°—Ä–µ–¥–Ω—è—è –æ–±–∂–∞—Ä–∫–∞, –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞.\n–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∫—É—Å: —à–æ–∫–æ–ª–∞–¥, –æ—Ä–µ—Ö–∏, –ª—ë–≥–∫–∞—è –∫–∏—Å–ª–∏–Ω–∫–∞. (–±–µ–∑ –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–£–ü–ò–¢–¨", callback_data="buy_1000")],
            [InlineKeyboardButton(text="–ö–ê–¢–ê–õ–û–ì", callback_data="catalog")],
            [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "buy_250")
async def buy_250(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞.\n–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n–í–∞—à–µ <b>–§–ò–û</b>:", parse_mode="HTML", reply_markup=back_to("catalog"))
    await state.set_state(OrderForm.fio)
    await state.update_data(weight="250 –≥", paylink="https://yookassa.ru/my/i/aF6PZhaxXQmX/l")

@dp.callback_query(F.data == "buy_1000")
async def buy_1000(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞.\n–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n–í–∞—à–µ <b>–§–ò–û</b>:", parse_mode="HTML", reply_markup=back_to("catalog"))
    await state.set_state(OrderForm.fio)
    await state.update_data(weight="1000 –≥", paylink="https://yookassa.ru/my/i/aF6QF8z6dd86/l")

@dp.callback_query(F.data == "back_to_fio")
async def go_to_fio(callback: types.CallbackQuery, state: FSMContext):
    msg = await bot.send_message(callback.from_user.id, "–í–∞—à–µ <b>–§–ò–û</b>:", parse_mode="HTML", reply_markup=back_to("catalog"))
    await state.set_state(OrderForm.fio)
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "back_to_phone")
async def go_to_phone(callback: types.CallbackQuery, state: FSMContext):
    msg = await bot.send_message(callback.from_user.id, "–í–∞—à <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>:", parse_mode="HTML", reply_markup=back_to("back_to_fio"))
    await state.set_state(OrderForm.phone)
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "back_to_address")
async def go_to_address(callback: types.CallbackQuery, state: FSMContext):
    msg = await bot.send_message(callback.from_user.id, "–í–∞—à <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>:", parse_mode="HTML", reply_markup=back_to("back_to_phone"))
    await state.set_state(OrderForm.address)
    await state.update_data(last_bot_msg_id=msg.message_id)

#@dp.callback_query(F.data == "back_to_grind")
#async def go_to_grind(callback: types.CallbackQuery, state: FSMContext):
#    msg = await bot.send_message(callback.from_user.id, "–ù—É–∂–µ–Ω –ª–∏ –ø–æ–º–æ–ª? –ï—Å–ª–∏ –¥–∞ ‚Äî –ø–æ–¥ –∫–∞–∫–æ–π —Å–ø–æ—Å–æ–±?", reply_markup=back_to("back_to_address"))
#    await state.set_state(OrderForm.grind)
#    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.message(OrderForm.fio)
async def order_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    msg = await bot.send_message(
        message.chat.id,
        "–í–∞—à <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>:",
        parse_mode="HTML",
        reply_markup=back_to("back_to_fio")
    )
    await state.set_state(OrderForm.phone)
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.message(OrderForm.phone)
async def order_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    msg = await bot.send_message(
        message.chat.id,
        "–í–∞—à <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>:",
        parse_mode="HTML",
        reply_markup=back_to("back_to_phone")
    )
    await state.set_state(OrderForm.address)
    await state.update_data(last_bot_msg_id=msg.message_id)

#@dp.message(OrderForm.address)
#async def order_address(message: types.Message, state: FSMContext):
#    await state.update_data(address=message.text)
#    msg = await bot.send_message(
#        message.chat.id,
#        "–ù—É–∂–µ–Ω –ª–∏ –ø–æ–º–æ–ª? –ï—Å–ª–∏ –¥–∞ ‚Äî –ø–æ–¥ –∫–∞–∫–æ–π —Å–ø–æ—Å–æ–±?",
#        reply_markup=back_to("back_to_address")
#    )
#    await state.set_state(OrderForm.grind)
#    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.message(OrderForm.address)
async def order_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data() or {}
    addr = data.get('address', '').lower()
    city_bonus = ""
    if "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" in addr:
        city_bonus = "\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞–∫–∞–∑ –¥–ª—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –∑–∞ –Ω–∞—à —Å—á—ë—Ç!"
    paylink = data.get('paylink', '')
    weight = data.get('weight', '')
    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=paylink)],
        [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
    ])
    await bot.send_message(
        message.chat.id,
        f"–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî <b>–æ–ø–ª–∞—Ç–∞</b>.\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {weight}\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å!{city_bonus}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=pay_kb
    )
    await bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ):")
    await state.set_state(OrderForm.payment_screenshot)

#@dp.message(OrderForm.grind)
#async def order_grind(message: types.Message, state: FSMContext):
#    await state.update_data(grind=message.text)
#    data: dict[str, Any] = await state.get_data() or {}
#    addr = data.get('address', '').lower()
#    city_bonus = ""
#    if "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" in addr:
#        city_bonus = "\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞–∫–∞–∑ –¥–ª—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –∑–∞ –Ω–∞—à —Å—á—ë—Ç!"
#    paylink = data.get('paylink', '')
#    weight = data.get('weight', '')
#    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
#        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=paylink)],
#        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_grind")],
#        [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
#    ])
#    await bot.send_message(
#        message.chat.id,
 #       f"–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî <b>–æ–ø–ª–∞—Ç–∞</b>.\n\n"
 #       f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {weight}\n"
 #       f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å!{city_bonus}",
#        parse_mode="HTML",
#        disable_web_page_preview=True,
 #       reply_markup=pay_kb
#    )
#    await bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ):")
#    await state.set_state(OrderForm.payment_screenshot)

@dp.message(OrderForm.payment_screenshot, F.photo)
async def order_payment_screenshot(message: types.Message, state: FSMContext):
    data: dict[str, Any] = await state.get_data() or {}
    if not message.photo or len(message.photo) == 0:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã)!")
        return
    photo_id = message.photo[-1].file_id

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç None
    from_user = message.from_user
    if from_user is not None:
        username = from_user.username if from_user.username else "–Ω–µ—Ç"
        user_id = from_user.id
    else:
        username = "–Ω–µ—Ç"
        user_id = "–Ω–µ—Ç"

    order_text = (
        "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –î–∑–µ–Ω –ö–æ—Ñ–µ!\n"
        f"–§–ò–û: {data.get('fio', '')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address', '')}\n"
        f"–ü–æ–º–æ–ª: {data.get('grind', '')}\n"
        f"–í–µ—Å: {data.get('weight', '')}\n"
        f"Telegram: @{username} (ID: {user_id})"
    )
    user_link = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram",
            url=f"tg://user?id={user_id}"
        )]
    ])
    for admin in ADMINS:
        try:
            await bot.send_message(admin, order_text, reply_markup=user_link)
            await bot.send_photo(admin, photo_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin}: {e}")
    await send_order_email(
        "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –î–∑–µ–Ω –ö–æ—Ñ–µ",
        order_text,
        SMTP_EMAIL
    )
    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu())
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–µ–Ω—é/–¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥—Ä.
@dp.callback_query(F.data == "shipping")
async def shipping(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    msg = await bot.send_photo(
        callback.from_user.id,
        "https://i.postimg.cc/VNJDDSNn/250.jpg",
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û –î–û–°–¢–ê–í–ö–ï", callback_data="shipping_info")],
            [InlineKeyboardButton(text="–û–ë –û–ü–õ–ê–¢–ï", callback_data="payment_info")],
            [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
        ])
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "shipping_info")
async def shipping_info(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    msg = await bot.send_message(
        callback.from_user.id,
        "üöö <b>–û –î–æ—Å—Ç–∞–≤–∫–µ</b>\n\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª—É–∂–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "‚Ä¢ 5Post ‚Äî –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–æ–≤ –†–§\n"
        "‚Ä¢ –°–î–≠–ö ‚Äî –ø—É–Ω–∫—Ç—ã –∏ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –†–§\n"
        "‚Ä¢ –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É, –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞.\n"
        "–°—Ä–æ–∫–∏: –æ—Ç 1 –¥–æ 7 –¥–Ω–µ–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª—É–∂–±—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞.\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n"
        "‚ùóÔ∏è–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        parse_mode="HTML",
        reply_markup=back_menu()
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "payment_info")
async def payment_info(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    msg = await bot.send_message(
        callback.from_user.id,
        "üí≥ <b>–û–± –û–ø–ª–∞—Ç–µ</b>\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Æ–ö–∞—Å—Å–∞, –≤ –Ω–µ–π –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å–æ–±. \n"
        "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
        "- SberPay\n"
        "- –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n"
        "- –ö–æ—à–µ–ª—å–∫–æ–º –ÆMoney\n"
        "- –°–ë–ü\n\n"
        "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–∞—Ç–∞–ª–æ–≥</b>.",
        parse_mode="HTML",
        reply_markup=back_menu()
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "question")
async def question(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    kb = [
        [InlineKeyboardButton(text="–ï–í–ì–ï–ù–ò–ô", url="https://t.me/skybiker01")],
        [InlineKeyboardButton(text="–ö–ò–†–ò–õ–õ", url="https://t.me/kirillshishkin29")],
        [InlineKeyboardButton(text="–ù–ê–® –°–ê–ô–¢", url="https://dzencoffee.ru")],
        [InlineKeyboardButton(text="–ú–ï–ù–Æ", callback_data="main_menu")]
    ]
    msg = await bot.send_photo(
        callback.from_user.id,
        "https://i.postimg.cc/XYGCP9wj/IMG-20250711-173618-122.jpg",
        caption=(
            "–ï—Å–ª–∏ —É –í–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n"
            "–ü–æ—á—Ç–∞: dzencoffee@mail.ru"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery, state: FSMContext):
    await clean_last_message(callback=callback, state=state)
    msg = await bot.send_photo(
        callback.from_user.id,
        "https://i.postimg.cc/Bn6gn8Hk/250.jpg",
        caption=(
            "–í –º–∏—Ä–µ, –≥–¥–µ –≤—Å–µ —Å–ø–µ—à–∞—Ç –∏ –ø—å—é—Ç –∫–æ—Ñ–µ –Ω–∞ –±–µ–≥—É, –º—ã –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å ‚òï\n"
            "–î–ª—è –Ω–∞—Å –∫–æ—Ñ–µ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± –≤–∑–±–æ–¥—Ä–∏—Ç—å—Å—è, –∞ –æ—Å–æ–±—ã–π —Ä–∏—Ç—É–∞–ª: –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è, –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∫—É—Å –∂–∏–∑–Ω–∏ –∏ –Ω–∞–π—Ç–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–∏ üßò‚Äç‚ôÇÔ∏è\n\n"
            "–ú—ã —Å–æ–∑–¥–∞—ë–º –∫–æ—Ñ–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–º–µ–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º –∏ –Ω–∞–±—Ä–∞—Ç—å—Å—è —Å–∏–ª ‚Äî —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ —É–∂–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ ‚ú®\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 100% –∞—Ä–∞–±–∏–∫—É: –ª—É—á—à–∏–µ –∑—ë—Ä–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏ üå±\n"
            "–ë–µ–∑ –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤.\n"
            "–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∫–æ—Ñ–µ –Ω–∞ —Å–∫–ª–∞–¥–µ ‚Äî –æ–±–∂–∞—Ä–∏–≤–∞–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ–∂–µ—Å—Ç—å, –≥–ª—É–±–æ–∫–∏–π –∏ –º—è–≥–∫–∏–π –≤–∫—É—Å, –±–µ–∑ –ª–∏—à–Ω–µ–π –∫–∏—Å–ª–∏–Ω–∫–∏ –∏ –≥–æ—Ä–µ—á–∏ ü•Ñ\n\n"
            "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ñ–µ.\n"
            "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∂–∏–∑–Ω—å ‚Äî –Ω–µ –≥–æ–Ω–∫–∞, –∞ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º ü§ç"
        ),
        parse_mode="HTML",
        reply_markup=back_menu()
    )
    await state.update_data(last_bot_msg_id=msg.message_id)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
